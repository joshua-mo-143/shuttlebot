use crate::Context;
use crate::Error;
use poise::serenity_prelude::CacheHttp;
use tracing::error;

/// Responds with "world!"
#[poise::command(slash_command)]
pub async fn hello(ctx: Context<'_>) -> Result<(), Error> {
    ctx.say("world!").await?;
    Ok(())
}

/// Link to Shuttle documentation
#[poise::command(slash_command)]
pub async fn docs(
    ctx: Context<'_>,
    #[description = "The docs you want to link to"] docs: DocsLinks,
) -> Result<(), Error> {
    ctx.say(docs.to_link()).await?;
    Ok(())
}

/// Elevate a Discord help thread to a GitHub issue. This locks the thread.
#[poise::command(slash_command)]
pub async fn elevate(
    ctx: Context<'_>,
    #[description = "Add extra contextual notes"] notes: Option<String>,
) -> Result<(), Error> {
    let author = ctx.author().name.clone();

    let notes = if notes.is_some() {
        notes.unwrap()
    } else {
        "None".to_string()
    };

    let topic = ctx
        .serenity_context()
        .http()
        .get_channel(ctx.channel_id().into())
        .await
        .unwrap()
        .guild()
        .unwrap()
        .name;

    ctx.guild_id().unwrap();

    let thread_url = {
        format!(
            "https://discord.com/channels/{}/{}",
            ctx.guild_id().unwrap(),
            ctx.channel_id()
        )
    };

    let messages = ctx
        .channel_id()
        .messages(ctx.http(), |message| message)
        .await
        .unwrap();

    let message_content = messages.last().unwrap().content.clone();
    let issue_title = format!("[AUTOGENERATED] {topic}");

    let message = format!("This issue was autogenerated by shuttlebot. The issue was originally created by {author} on discord. You can find the discord thread [here.]({thread_url}) \n
            ---\n
            Notes: {notes}\n
            ---\n
            {message_content}");

    match ctx
        .data()
        .crab
        .issues("joshua-mo-143", "test")
        .create(issue_title)
        .body(message)
        .send()
        .await
    {
        Ok(res) => {
            ctx.say(format!("This issue was successfully elevated to a GitHub issue! You can find the issue at: {}
                \n---\n
                The thread will now be locked to avoid needing to keep both communication channels synced with each other. 
                \nIf you're not the original poster and you're having the same issue, please open a new Help thread or comment on the GitHub issue.
                \n---\n
                Thank you!", res.html_url))
                .await?;
        }
        Err(e) => {
            error!("Error creating Github issue: {:?}", e);
        }
    }

    Ok(())
}

// Gets the channel and guild ID of a channel
#[poise::command(slash_command)]
pub async fn getchannel(ctx: Context<'_>) -> Result<(), Error> {
    let topic = ctx
        .serenity_context()
        .http()
        .get_channel(ctx.channel_id().into())
        .await
        .unwrap()
        .guild()
        .unwrap()
        .name;

    ctx.say(format!(
        "Guild ID: {}\nChannel ID: {}\nTopic name: {topic:?}",
        ctx.guild_id().unwrap(),
        ctx.channel_id(),
    ))
    .await?;
    Ok(())
}

#[derive(Debug, poise::ChoiceParameter)]
pub enum DocsLinks {
    #[name = "Documentation on setting up secrets/env with Shuttle"]
    Secrets,
    #[name = "Documentation on provisioned databases via shared databases with Shuttle"]
    Databases,
    #[name = "Documentation on setting up a simple key-value store with Shuttle"]
    Persist,
    #[name = "Documentation on setting up static files with Shuttle"]
    Assets,
    #[name = "Documentation on setting up a custom service with Shuttle"]
    Custom,
}

impl DocsLinks {
    pub fn to_link(&self) -> String {
        match self {
            DocsLinks::Secrets => String::from("https://docs.shuttle.rs/resources/shuttle-secrets"),
            DocsLinks::Databases => {
                String::from("https://docs.shuttle.rs/resources/shuttle-shared-db")
            }
            DocsLinks::Persist => String::from("https://docs.shuttle.rs/resources/shuttle-persist"),
            DocsLinks::Assets => {
                String::from("https://docs.shuttle.rs/resources/shuttle-static-folder")
            }
            DocsLinks::Custom => String::from("https://docs.shuttle.rs/tutorials/custom-service"),
        }
    }
}
